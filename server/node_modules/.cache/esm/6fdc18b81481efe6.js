let Reponse;_148‍.x([["getReponses",()=>getReponses],["addReponses",()=>addReponses],["getReponseById",()=>getReponseById],["editReponse",()=>editReponse],["deleteReponse",()=>deleteReponse]]);_148‍.w("../models/reponse-model.js",[["default",["Reponse"],function(v){Reponse=v}]]);

const nodemailer = require('nodemailer')

var transporter = nodemailer.createTransport({
	service: 'gmail',
	auth: {
		user: 'facter.projet@gmail.com',
		pass: 'shcfooryykzgwlgr'
	},
	tls: {
		rejectUnauthorized: false
	}
})
       const  getReponses = async(request,response) =>{
    
    try{
        let  reponse =  await Reponse.find();
        response.status(200).json(reponse);
    }catch( error ){
        response.status(404).json({ message: error.message })
    }
    
}

       const  addReponses = async (request,response) =>{
    const reponse = request.body;
    const newReponse= new Reponse (reponse);
  

    try{
         await newReponse.save();
        response.status(201).json(newReponse);
        var mailOptions = {
            from: 'Facter <facter.projet@gmail.com>',
            to: request.body.email,
            subject: 'Reponse',
            html:request.body.reponse
        }
        transporter.sendMail(mailOptions, function (error, info) {
            if (error) {
                _148‍.g.console.log(error)
            }
            else {
                console.log("Email sent")
            }
        })
    } catch (error){
        _148‍.g.console.log(error);     
    }

}

       const getReponseById = async (request, response) => {
    try{
        const reponse = await Reponse.findById(request.params.id);
        response.status(200).json(reponse);
    }catch( error ){
        response.status(404).json({message: error.message })
    }
}

       const editReponse = async (request, response) => {
    let reponse = await Reponse.findById(request.params.id);
    reponse = request.body;

    const editReponse = new Reponse(reponse);
    try{
        await Reponse.updateOne({_id: request.params.id}, editReponse);
        response.status(201).json(editReponse);
    } catch (error){
        response.status(409).json({ message: error.message});     
    }
}

       const deleteReponse = async (request, response) => {
    try{
        await Reponse.deleteOne({_id: request.params.id});
        response.status(201).json("Reponse deleted Successfully");
    } catch (error){
        response.status(409).json({ message: error.message});     
    }
}

